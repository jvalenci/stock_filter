package com.jvalenc.stock.web.rest;

import com.eclipsesource.json.Json;
import com.eclipsesource.json.JsonObject;
import com.jvalenc.stock.models.QueryCriteria;
import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by jonat on 11/12/2017.
 */
public class AlphaVantageWebClient implements IWebClient<JsonObject>{

    //this key was auto generated by alpha vantage
    private String API_KEY = "B5E9IZNOFQ20MEF7";
    private String BASE_URL = "https://www.alphavantage.co/query?";
    private String AND = "&";
    private List<QueryCriteria> queries;
    private List<String> requests;
    private List<JsonObject> responses;
    private static Logger logger = Logger.getLogger(AlphaVantageWebClient.class);

    /**
     *
     * @param queries
     */
    public AlphaVantageWebClient(List<QueryCriteria> queries){

        logger.info("making webClient with passed in queries");

        this.queries = queries;
        this.requests = new ArrayList<>();
        this.responses = new ArrayList<>();

        for ( QueryCriteria queryCriteria : queries){
            if(!queryCriteria.isValid()){
                logger.error("One of the queries are invalid");
                return;
            }
        }
        buildUrls();
    }

    /**
     * default constructor
     */
    public AlphaVantageWebClient(){

    }

    /**
     * Builds the url with given queries from constructor
     */
    private void buildUrls(){
        logger.info("building URLs from queries");
        if (queries != null && queries.size() == 2) {
            queries.forEach(
                    queryCriteria -> {

                        StringBuilder sb = new StringBuilder();
                        sb.append(BASE_URL);
                        sb.append("function=" + queryCriteria.getQueryFunction().getFunctionName());
                        sb.append(AND);
                        sb.append("symbol=" + queryCriteria.getSymbol());
                        sb.append(AND);
                        sb.append("interval=" + queryCriteria.getInterval().getInterval());
                        sb.append(AND);
                        sb.append("time_period=" + queryCriteria.getTimePeriod().getTimePeriod());
                        sb.append(AND);
                        sb.append("series_type=" + queryCriteria.getSeriesType().getSeriesType());
                        sb.append(AND);
                        sb.append("apikey=" + API_KEY);

                        requests.add(sb.toString());
                    }
            );
        }else{
            logger.error("query Criterias were null or there wasn't 2 queryCriterias");
        }
    }

    /**
     * Sends the requests and gets responses
     */
    @Override
    public void sendRequest() throws InterruptedException{

        if(requests != null && requests.size() == 2) {
            logger.info("Sending requests to AlphaVantage");
            requests.forEach(
                    request -> {
                        try {
                            URL url = new URL(request);
                            responses.add(Json.parse(IOUtils.toString(url, "UTF-8")).asObject());
                        } catch (IOException e) {
                            logger.error("There was an error with the requests string: " + e.getMessage());
                        }
                        try {
                            //logger.info("sleeping...");
                            //API requirements to have a one sec interval between calls.
                            Thread.sleep(5000);
                            //logger.info("awake...");
                        }catch (InterruptedException e){
                            logger.error(e);
                        }
                    });
            logger.info("Successfully sent requests to AlphaVantage");

        }else{
            logger.error("Requests were null or wrong number of request. 2 are need.");
        }
    }

    /**
     *
     * @return responses
     */
    public List<JsonObject> getResponses(){
        return responses;
    }
}
